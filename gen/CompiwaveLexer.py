# Generated from /home/luism/PycharmProjects/COMPIWAVE/Compiwave.g4 by ANTLR 4.6
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\60")
        buf.write("\u014a\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f")
        buf.write("\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3")
        buf.write("\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3%\3%\3")
        buf.write("%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\3)\3)\3)\7)\u00fa\n)\f)\16)\u00fd\13)\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0108\n*\3+\6+\u010b\n+\r")
        buf.write("+\16+\u010c\3,\6,\u0110\n,\r,\16,\u0111\3,\3,\7,\u0116")
        buf.write("\n,\f,\16,\u0119\13,\3,\3,\6,\u011d\n,\r,\16,\u011e\5")
        buf.write(",\u0121\n,\3-\3-\3-\7-\u0126\n-\f-\16-\u0129\13-\3-\3")
        buf.write("-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\61\3\61\5\61\u0137")
        buf.write("\n\61\3\62\6\62\u013a\n\62\r\62\16\62\u013b\3\62\3\62")
        buf.write("\3\63\3\63\7\63\u0142\n\63\f\63\16\63\u0145\13\63\3\63")
        buf.write("\3\63\3\63\3\63\4\u0127\u0143\2\64\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[\2]\2_")
        buf.write("\2a\2c/e\60\3\2\6\3\2c|\5\2C\\aac|\3\2\62;\5\2\13\f\17")
        buf.write("\17\"\"\u0152\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t")
        buf.write("\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3")
        buf.write("\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2")
        buf.write("\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2")
        buf.write("\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2")
        buf.write("\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2")
        buf.write("\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2")
        buf.write("\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2c\3")
        buf.write("\2\2\2\2e\3\2\2\2\3g\3\2\2\2\5m\3\2\2\2\7q\3\2\2\2\ts")
        buf.write("\3\2\2\2\13x\3\2\2\2\rz\3\2\2\2\17|\3\2\2\2\21~\3\2\2")
        buf.write("\2\23\u0080\3\2\2\2\25\u0089\3\2\2\2\27\u008e\3\2\2\2")
        buf.write("\31\u0090\3\2\2\2\33\u0092\3\2\2\2\35\u0094\3\2\2\2\37")
        buf.write("\u0099\3\2\2\2!\u009c\3\2\2\2#\u00a1\3\2\2\2%\u00a7\3")
        buf.write("\2\2\2\'\u00aa\3\2\2\2)\u00b1\3\2\2\2+\u00b7\3\2\2\2-")
        buf.write("\u00ba\3\2\2\2/\u00bd\3\2\2\2\61\u00bf\3\2\2\2\63\u00c1")
        buf.write("\3\2\2\2\65\u00c3\3\2\2\2\67\u00c5\3\2\2\29\u00c7\3\2")
        buf.write("\2\2;\u00ca\3\2\2\2=\u00cd\3\2\2\2?\u00cf\3\2\2\2A\u00d1")
        buf.write("\3\2\2\2C\u00d4\3\2\2\2E\u00d7\3\2\2\2G\u00da\3\2\2\2")
        buf.write("I\u00dd\3\2\2\2K\u00e3\3\2\2\2M\u00e7\3\2\2\2O\u00ef\3")
        buf.write("\2\2\2Q\u00f6\3\2\2\2S\u0107\3\2\2\2U\u010a\3\2\2\2W\u0120")
        buf.write("\3\2\2\2Y\u0122\3\2\2\2[\u012c\3\2\2\2]\u012e\3\2\2\2")
        buf.write("_\u0130\3\2\2\2a\u0136\3\2\2\2c\u0139\3\2\2\2e\u013f\3")
        buf.write("\2\2\2gh\7d\2\2hi\7g\2\2ij\7i\2\2jk\7k\2\2kl\7p\2\2l\4")
        buf.write("\3\2\2\2mn\7g\2\2no\7p\2\2op\7f\2\2p\6\3\2\2\2qr\7=\2")
        buf.write("\2r\b\3\2\2\2st\7n\2\2tu\7k\2\2uv\7u\2\2vw\7v\2\2w\n\3")
        buf.write("\2\2\2xy\7*\2\2y\f\3\2\2\2z{\7+\2\2{\16\3\2\2\2|}\7]\2")
        buf.write("\2}\20\3\2\2\2~\177\7_\2\2\177\22\3\2\2\2\u0080\u0081")
        buf.write("\7h\2\2\u0081\u0082\7w\2\2\u0082\u0083\7p\2\2\u0083\u0084")
        buf.write("\7e\2\2\u0084\u0085\7v\2\2\u0085\u0086\7k\2\2\u0086\u0087")
        buf.write("\7q\2\2\u0087\u0088\7p\2\2\u0088\24\3\2\2\2\u0089\u008a")
        buf.write("\7x\2\2\u008a\u008b\7q\2\2\u008b\u008c\7k\2\2\u008c\u008d")
        buf.write("\7f\2\2\u008d\26\3\2\2\2\u008e\u008f\7.\2\2\u008f\30\3")
        buf.write("\2\2\2\u0090\u0091\7}\2\2\u0091\32\3\2\2\2\u0092\u0093")
        buf.write("\7\177\2\2\u0093\34\3\2\2\2\u0094\u0095\7o\2\2\u0095\u0096")
        buf.write("\7c\2\2\u0096\u0097\7k\2\2\u0097\u0098\7p\2\2\u0098\36")
        buf.write("\3\2\2\2\u0099\u009a\7k\2\2\u009a\u009b\7h\2\2\u009b ")
        buf.write("\3\2\2\2\u009c\u009d\7g\2\2\u009d\u009e\7n\2\2\u009e\u009f")
        buf.write("\7u\2\2\u009f\u00a0\7g\2\2\u00a0\"\3\2\2\2\u00a1\u00a2")
        buf.write("\7y\2\2\u00a2\u00a3\7j\2\2\u00a3\u00a4\7k\2\2\u00a4\u00a5")
        buf.write("\7n\2\2\u00a5\u00a6\7g\2\2\u00a6$\3\2\2\2\u00a7\u00a8")
        buf.write("\7f\2\2\u00a8\u00a9\7q\2\2\u00a9&\3\2\2\2\u00aa\u00ab")
        buf.write("\7t\2\2\u00ab\u00ac\7g\2\2\u00ac\u00ad\7v\2\2\u00ad\u00ae")
        buf.write("\7w\2\2\u00ae\u00af\7t\2\2\u00af\u00b0\7p\2\2\u00b0(\3")
        buf.write("\2\2\2\u00b1\u00b2\7r\2\2\u00b2\u00b3\7t\2\2\u00b3\u00b4")
        buf.write("\7k\2\2\u00b4\u00b5\7p\2\2\u00b5\u00b6\7v\2\2\u00b6*\3")
        buf.write("\2\2\2\u00b7\u00b8\7>\2\2\u00b8\u00b9\7>\2\2\u00b9,\3")
        buf.write("\2\2\2\u00ba\u00bb\7@\2\2\u00bb\u00bc\7@\2\2\u00bc.\3")
        buf.write("\2\2\2\u00bd\u00be\7?\2\2\u00be\60\3\2\2\2\u00bf\u00c0")
        buf.write("\7-\2\2\u00c0\62\3\2\2\2\u00c1\u00c2\7/\2\2\u00c2\64\3")
        buf.write("\2\2\2\u00c3\u00c4\7,\2\2\u00c4\66\3\2\2\2\u00c5\u00c6")
        buf.write("\7\61\2\2\u00c68\3\2\2\2\u00c7\u00c8\7?\2\2\u00c8\u00c9")
        buf.write("\7?\2\2\u00c9:\3\2\2\2\u00ca\u00cb\7#\2\2\u00cb\u00cc")
        buf.write("\7?\2\2\u00cc<\3\2\2\2\u00cd\u00ce\7>\2\2\u00ce>\3\2\2")
        buf.write("\2\u00cf\u00d0\7@\2\2\u00d0@\3\2\2\2\u00d1\u00d2\7>\2")
        buf.write("\2\u00d2\u00d3\7?\2\2\u00d3B\3\2\2\2\u00d4\u00d5\7@\2")
        buf.write("\2\u00d5\u00d6\7?\2\2\u00d6D\3\2\2\2\u00d7\u00d8\7(\2")
        buf.write("\2\u00d8\u00d9\7(\2\2\u00d9F\3\2\2\2\u00da\u00db\7~\2")
        buf.write("\2\u00db\u00dc\7~\2\2\u00dcH\3\2\2\2\u00dd\u00de\7h\2")
        buf.write("\2\u00de\u00df\7n\2\2\u00df\u00e0\7q\2\2\u00e0\u00e1\7")
        buf.write("c\2\2\u00e1\u00e2\7v\2\2\u00e2J\3\2\2\2\u00e3\u00e4\7")
        buf.write("k\2\2\u00e4\u00e5\7p\2\2\u00e5\u00e6\7v\2\2\u00e6L\3\2")
        buf.write("\2\2\u00e7\u00e8\7d\2\2\u00e8\u00e9\7q\2\2\u00e9\u00ea")
        buf.write("\7q\2\2\u00ea\u00eb\7n\2\2\u00eb\u00ec\7g\2\2\u00ec\u00ed")
        buf.write("\7c\2\2\u00ed\u00ee\7p\2\2\u00eeN\3\2\2\2\u00ef\u00f0")
        buf.write("\7u\2\2\u00f0\u00f1\7v\2\2\u00f1\u00f2\7t\2\2\u00f2\u00f3")
        buf.write("\7k\2\2\u00f3\u00f4\7p\2\2\u00f4\u00f5\7i\2\2\u00f5P\3")
        buf.write("\2\2\2\u00f6\u00fb\5[.\2\u00f7\u00fa\5]/\2\u00f8\u00fa")
        buf.write("\5_\60\2\u00f9\u00f7\3\2\2\2\u00f9\u00f8\3\2\2\2\u00fa")
        buf.write("\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2")
        buf.write("\u00fcR\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fe\u00ff\7V\2\2")
        buf.write("\u00ff\u0100\7t\2\2\u0100\u0101\7w\2\2\u0101\u0108\7g")
        buf.write("\2\2\u0102\u0103\7H\2\2\u0103\u0104\7c\2\2\u0104\u0105")
        buf.write("\7n\2\2\u0105\u0106\7u\2\2\u0106\u0108\7g\2\2\u0107\u00fe")
        buf.write("\3\2\2\2\u0107\u0102\3\2\2\2\u0108T\3\2\2\2\u0109\u010b")
        buf.write("\5_\60\2\u010a\u0109\3\2\2\2\u010b\u010c\3\2\2\2\u010c")
        buf.write("\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010dV\3\2\2\2\u010e")
        buf.write("\u0110\5_\60\2\u010f\u010e\3\2\2\2\u0110\u0111\3\2\2\2")
        buf.write("\u0111\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0113\3")
        buf.write("\2\2\2\u0113\u0117\7\60\2\2\u0114\u0116\5_\60\2\u0115")
        buf.write("\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2\2")
        buf.write("\u0117\u0118\3\2\2\2\u0118\u0121\3\2\2\2\u0119\u0117\3")
        buf.write("\2\2\2\u011a\u011c\7\60\2\2\u011b\u011d\5_\60\2\u011c")
        buf.write("\u011b\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u011c\3\2\2\2")
        buf.write("\u011e\u011f\3\2\2\2\u011f\u0121\3\2\2\2\u0120\u010f\3")
        buf.write("\2\2\2\u0120\u011a\3\2\2\2\u0121X\3\2\2\2\u0122\u0127")
        buf.write("\7$\2\2\u0123\u0126\5a\61\2\u0124\u0126\13\2\2\2\u0125")
        buf.write("\u0123\3\2\2\2\u0125\u0124\3\2\2\2\u0126\u0129\3\2\2\2")
        buf.write("\u0127\u0128\3\2\2\2\u0127\u0125\3\2\2\2\u0128\u012a\3")
        buf.write("\2\2\2\u0129\u0127\3\2\2\2\u012a\u012b\7$\2\2\u012bZ\3")
        buf.write("\2\2\2\u012c\u012d\t\2\2\2\u012d\\\3\2\2\2\u012e\u012f")
        buf.write("\t\3\2\2\u012f^\3\2\2\2\u0130\u0131\t\4\2\2\u0131`\3\2")
        buf.write("\2\2\u0132\u0133\7^\2\2\u0133\u0137\7$\2\2\u0134\u0135")
        buf.write("\7^\2\2\u0135\u0137\7^\2\2\u0136\u0132\3\2\2\2\u0136\u0134")
        buf.write("\3\2\2\2\u0137b\3\2\2\2\u0138\u013a\t\5\2\2\u0139\u0138")
        buf.write("\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u0139\3\2\2\2\u013b")
        buf.write("\u013c\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013e\b\62\2")
        buf.write("\2\u013ed\3\2\2\2\u013f\u0143\7%\2\2\u0140\u0142\13\2")
        buf.write("\2\2\u0141\u0140\3\2\2\2\u0142\u0145\3\2\2\2\u0143\u0144")
        buf.write("\3\2\2\2\u0143\u0141\3\2\2\2\u0144\u0146\3\2\2\2\u0145")
        buf.write("\u0143\3\2\2\2\u0146\u0147\7\f\2\2\u0147\u0148\3\2\2\2")
        buf.write("\u0148\u0149\b\63\2\2\u0149f\3\2\2\2\20\2\u00f9\u00fb")
        buf.write("\u0107\u010c\u0111\u0117\u011e\u0120\u0125\u0127\u0136")
        buf.write("\u013b\u0143\3\b\2\2")
        return buf.getvalue()


class CompiwaveLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    PUSH = 21
    POP = 22
    ASSIGN = 23
    ADD = 24
    MINUS = 25
    MULT = 26
    DIV = 27
    EQUALS = 28
    NOTEQUAL = 29
    LT = 30
    GT = 31
    LEQUAL = 32
    GEQUAL = 33
    AND = 34
    OR = 35
    T_FLOAT = 36
    T_INT = 37
    T_BOOL = 38
    T_STRING = 39
    ID = 40
    BOOLEAN = 41
    INT = 42
    FLOAT = 43
    STRING = 44
    WS = 45
    SL_COMMENT = 46

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'begin'", "'end'", "';'", "'list'", "'('", "')'", "'['", "']'", 
            "'function'", "'void'", "','", "'{'", "'}'", "'main'", "'if'", 
            "'else'", "'while'", "'do'", "'return'", "'print'", "'<<'", 
            "'>>'", "'='", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'<'", 
            "'>'", "'<='", "'>='", "'&&'", "'||'", "'float'", "'int'", "'boolean'", 
            "'string'" ]

    symbolicNames = [ "<INVALID>",
            "PUSH", "POP", "ASSIGN", "ADD", "MINUS", "MULT", "DIV", "EQUALS", 
            "NOTEQUAL", "LT", "GT", "LEQUAL", "GEQUAL", "AND", "OR", "T_FLOAT", 
            "T_INT", "T_BOOL", "T_STRING", "ID", "BOOLEAN", "INT", "FLOAT", 
            "STRING", "WS", "SL_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "PUSH", "POP", "ASSIGN", "ADD", "MINUS", "MULT", "DIV", 
                  "EQUALS", "NOTEQUAL", "LT", "GT", "LEQUAL", "GEQUAL", 
                  "AND", "OR", "T_FLOAT", "T_INT", "T_BOOL", "T_STRING", 
                  "ID", "BOOLEAN", "INT", "FLOAT", "STRING", "LOWERCASE", 
                  "LETTER", "DIGIT", "ESC", "WS", "SL_COMMENT" ]

    grammarFileName = "Compiwave.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.6")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


